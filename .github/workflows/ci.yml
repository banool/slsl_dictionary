name: All CI

on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  # Check which files / paths have changed.
  # We use this to inform whether we should run later jobs.
  changes:
    outputs:
      admin_site: ${{ steps.filter.outputs.admin_site }}
      frontend: ${{ steps.filter.outputs.frontend }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: '.github/filters.yml'
    - name: Print changes
      run: printf "Admin site changed $ADMIN_SITE\nFrontend changed $FRONTEND\n"
      env:
        ADMIN_SITE: ${{ steps.filter.outputs.admin_site }}
        FRONTEND: ${{ steps.filter.outputs.frontend }}

  # Build the admin site image and publish to Docker Hub.
  build_push_admin_site:
    needs: [changes]
    if: needs.changes.outputs.admin_site == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./admin_site
    steps:
    - uses: actions/checkout@v3
    - name: Log in to Docker Hub
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PERSONAL_ACCESS_TOKEN }}
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: banool/slsl-admin-site
        # 1. Tag the image with the branch name on push
        # 2. Tag the image with the commit hash
        tags: |
          type=ref,event=branch
          type=sha,format=long
    - name: Build and push Docker image
      uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
      with:
        context: admin_site
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  # Build static and push it to the bucket
  build_push_static_files:
    needs: [changes]
    if: needs.changes.outputs.admin_site == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./admin_site
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v2
    - uses: snok/install-poetry@d45b6d76012debf457ab49dffc7fb7b2efe8071d
      with:
        version: 1.7.1

    - run: poetry install
      shell: bash
      working-directory: ./admin_site

    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        service_account: 'githubactions@slsl-dictionary.iam.gserviceaccount.com'
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_JSON}}

    # This collects static files directly to the bucket.
    - name: Collect static files
      env:
        admin_bucket_name: "slsl-admin-bucket-31cc83f"
        media_bucket_name: "ignored"
      run: poetry run python manage.py collectstatic --noinput

  # Build and release the Android app. These secrets originate from the
  # slsl_dictionary_secrets repo. Note, this doesn't work until you've done a single
  # manual upload on the Google Play Console UI and submitted a release to the alpha
  # track. For that, run flutter build appbundle yourself (you'll have to copy the
  # secrets in to frontend/android temporarily). See more here:
  # https://stackoverflow.com/a/69899877/3846032
  release_android:
    needs: [changes]
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
    - uses: actions/checkout@v3

    - run: echo "${{ secrets.UPLOAD_KEYSTORE }}" | base64 -d > android/upload_keystore.jks
    - run: echo "${{ secrets.KEY_PROPERTIES }}" | base64 -d > android/key.properties

    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - uses: subosito/flutter-action@v1
      with:
        flutter-version: '3.19.2'
        channel: stable

    - run: flutter pub get

    - run: flutter test

    # This will produce a signed appbundle.
    - run: flutter build appbundle

    - name: Publish Android build to internal track
      uses: r0adkll/upload-google-play@v1.0.15
      with:
        serviceAccountJsonPlainText: ${{ secrets.ANDROID_SERVICE_ACCOUNT_JSON }}
        packageName: com.banool.slsl_dictionary
        releaseFile: frontend/build/app/outputs/bundle/release/app-release.aab
        track: internal

  # Build for web and upload the artifact.
  build_web:
    needs: [changes]
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
    - uses: actions/checkout@v3

    - uses: subosito/flutter-action@v1
      with:
        flutter-version: '3.19.2'
        channel: stable

    # Test and build
    - run: flutter pub get
    - run: flutter test
    - run: flutter build web

    # Upload the artifact.
    - uses: actions/upload-pages-artifact@v1
      with:
        path: frontend/build/web


  # Deploy to GitHub Pages using the artifact from the previous job.
  deploy_web:
    needs: [build_web]
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - uses: actions/configure-pages@v1
    - id: deployment
      uses: actions/deploy-pages@v1
