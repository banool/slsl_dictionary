# Apply the data from a csv generated by generate_csv.py to the database.

import csv

from django.core.management.base import BaseCommand
from django.db.utils import IntegrityError

from slsl_backend import models


class Command(BaseCommand):
    def add_arguments(self, parser):
        parser.add_argument("in_file")
        parser.add_argument("--dry-run", action="store_true")
        parser.add_argument("--limit", type=int)

    def handle(self, *args, **options):
        # Load data from the CSV file
        with open(options["in_file"], newline="", encoding="utf-8-sig") as f:
            reader = csv.DictReader(f)
            updated_entries = list(reader)

        # Iterate through CSV data and update corresponding entries in the DB
        num_updated = 0
        for row in updated_entries:
            try:
                entry = get_entry(row["English"])
                changes_made = False
                if entry.word_in_sinhala != row["Sinhala"] or entry.word_in_tamil != row["Tamil"]:
                    changes_made = True
                entry.word_in_sinhala = row["Sinhala"]
                entry.word_in_tamil = row["Tamil"]
                if changes_made:
                    if not options["dry_run"]:
                        entry.save()
                    self.stdout.write(
                        self.style.SUCCESS(f"Updated entry: {entry.word_in_english}")
                    )
                else:
                    self.stdout.write(
                        self.style.NOTICE(f"No changes made to entry: {entry.word_in_english}")
                    )
            except models.Entry.DoesNotExist:
                self.stdout.write(
                    self.style.WARNING(
                        f"Not Found: Entry {row['English']} (not in database)"
                    )
                )
            except:
                raise
            num_updated += 1
            if options["limit"] and num_updated >= options["limit"]:
                break


def get_entry(word_in_english):
    try:
        entry = models.Entry.objects.get(
            word_in_english=word_in_english
        )
        return entry
    except models.Entry.DoesNotExist:
        word_in_english = word_in_english.lower()
        try:
            entry = models.Entry.objects.get(
                word_in_english=word_in_english
            )
            return entry
        except models.Entry.DoesNotExist:
            word_in_english = word_in_english.capitalize()
            try:
                entry = models.Entry.objects.get(
                    word_in_english=word_in_english
                )
                return entry
            except:
                raise
