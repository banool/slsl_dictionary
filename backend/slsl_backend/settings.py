"""
Django settings for slsl_backend project.

Generated by 'django-admin startproject' using Django 4.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path
from urllib.parse import urlparse

from slsl_backend.secrets import secrets

DEPLOYMENT_MODE_OPTIONS = ["prod", "dev"]

deployment_mode = secrets["deployment_mode"]
if deployment_mode not in DEPLOYMENT_MODE_OPTIONS:
    raise RuntimeError(
        f"DEPLOYMENT_MODE env var set to invalid value: {deployment_mode}"
    )


if deployment_mode == "prod":
    DEBUG = False
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    SESSION_COOKIE_AGE = 60 * 60  # One hour.
    CSRF_COOKIE_SECURE = True
    X_FRAME_OPTIONS = "DENY"
    SECURE_HSTS_SECONDS = 3600
    SECURE_HSTS_PRELOAD = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True

if deployment_mode == "dev":
    DEBUG = True


###########################################################
# The following stuff is generic to all deployment modes. #
###########################################################

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = secrets["secret_key"]

# From here: https://cloud.google.com/python/django/run#csrf_configurations.
CLOUDRUN_SERVICE_URL = os.environ.get("CLOUDRUN_SERVICE_URL")
if CLOUDRUN_SERVICE_URL:
    ALLOWED_HOSTS = [urlparse(CLOUDRUN_SERVICE_URL).netloc]
    CSRF_TRUSTED_ORIGINS = [CLOUDRUN_SERVICE_URL]
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
else:
    ALLOWED_HOSTS = ["*"]

additional_allowed_hosts = secrets.get("additional_allowed_hosts")
if additional_allowed_hosts:
    ALLOWED_HOSTS += additional_allowed_hosts.split(",")

SITE_ROOT = os.path.dirname(os.path.realpath(__file__))

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "nested_admin",
    "slsl_backend",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "slsl_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "slsl_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": secrets["sql_engine"],
        "NAME": secrets["sql_database"],
        "USER": secrets["sql_user"],
        "PASSWORD": secrets["sql_password"],
    }
}

if secrets.get("sql_unix_socket"):
    # If a unix socket is configured, try to connect using that.
    DATABASES["default"]["HOST"] = secrets["sql_unix_socket"]
else:
    # Otherwise try to connect with host + port.
    DATABASES["default"]["HOST"] = secrets["sql_host"]
    DATABASES["default"]["PORT"] = secrets["sql_port"]

# File Storage: Media and static files

STATIC_URL = "/static/"

if secrets.get("bucket_name"):
    DEFAULT_FILE_STORAGE = "slsl_backend.storages.MediaStorage"
    STATICFILES_STORAGE = "slsl_backend.storages.StaticStorage"
    GS_BUCKET_NAME = secrets["bucket_name"]
    # https://github.com/jschneier/django-storages/issues/941
    GS_QUERYSTRING_AUTH = False
    # Compress uploaded files with gzip.
    GS_IS_GZIPPED = True
    # Content types to compress.
    GZIP_CONTENT_TYPES = [
        "text/css",
        "text/javascript",
        "application/javascript",
        "application/x-javascript",
        "image/svg+xml",
        "video/mp4",
        "video/x-m4v",
        "video/quicktime",
    ]
    # If this is true, new uploads with the same filename overwrite the previous one.
    # Since the videos we're using share the same filename in some cases, we turn this
    # off, in which case it will instead add additional characters to the filename.
    GS_FILE_OVERWRITE = False
else:
    STATIC_ROOT = "static"


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.ScryptPasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
]

# Logging

LOG_FILE = os.path.join(SITE_ROOT, "slsl_backend.log")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s"
        },
        "simple": {"format": "%(asctime)s %(module)s %(message)s"},
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "slsl_backend": {
            "handlers": ["console"],
            "level": "DEBUG",
        },
        "django.request": {
            "handlers": ["console"],
            "propagate": False,
            "level": "INFO",
        },
    },
}


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/Los_Angeles"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
